/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTransactionMetaDatumArgs } from "./CreateTransactionMetaDatumArgs";
import { UpdateTransactionMetaDatumArgs } from "./UpdateTransactionMetaDatumArgs";
import { DeleteTransactionMetaDatumArgs } from "./DeleteTransactionMetaDatumArgs";
import { TransactionMetaDatumFindManyArgs } from "./TransactionMetaDatumFindManyArgs";
import { TransactionMetaDatumFindUniqueArgs } from "./TransactionMetaDatumFindUniqueArgs";
import { TransactionMetaDatum } from "./TransactionMetaDatum";
import { PluralNameTest } from "../../pluralNameTest/base/PluralNameTest";
import { TransactionMetaDatumService } from "../transactionMetaDatum.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TransactionMetaDatum)
export class TransactionMetaDatumResolverBase {
  constructor(
    protected readonly service: TransactionMetaDatumService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TransactionMetaDatum",
    action: "read",
    possession: "any",
  })
  async _transactionMetaDataMeta(
    @graphql.Args() args: TransactionMetaDatumFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TransactionMetaDatum])
  @nestAccessControl.UseRoles({
    resource: "TransactionMetaDatum",
    action: "read",
    possession: "any",
  })
  async transactionMetaData(
    @graphql.Args() args: TransactionMetaDatumFindManyArgs
  ): Promise<TransactionMetaDatum[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TransactionMetaDatum, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TransactionMetaDatum",
    action: "read",
    possession: "own",
  })
  async transactionMetaDatum(
    @graphql.Args() args: TransactionMetaDatumFindUniqueArgs
  ): Promise<TransactionMetaDatum | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionMetaDatum)
  @nestAccessControl.UseRoles({
    resource: "TransactionMetaDatum",
    action: "create",
    possession: "any",
  })
  async createTransactionMetaDatum(
    @graphql.Args() args: CreateTransactionMetaDatumArgs
  ): Promise<TransactionMetaDatum> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        pluralNameTest: args.data.pluralNameTest
          ? {
              connect: args.data.pluralNameTest,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TransactionMetaDatum)
  @nestAccessControl.UseRoles({
    resource: "TransactionMetaDatum",
    action: "update",
    possession: "any",
  })
  async updateTransactionMetaDatum(
    @graphql.Args() args: UpdateTransactionMetaDatumArgs
  ): Promise<TransactionMetaDatum | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          pluralNameTest: args.data.pluralNameTest
            ? {
                connect: args.data.pluralNameTest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TransactionMetaDatum)
  @nestAccessControl.UseRoles({
    resource: "TransactionMetaDatum",
    action: "delete",
    possession: "any",
  })
  async deleteTransactionMetaDatum(
    @graphql.Args() args: DeleteTransactionMetaDatumArgs
  ): Promise<TransactionMetaDatum | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PluralNameTest, {
    nullable: true,
    name: "pluralNameTest",
  })
  @nestAccessControl.UseRoles({
    resource: "PluralNameTest",
    action: "read",
    possession: "any",
  })
  async resolveFieldPluralNameTest(
    @graphql.Parent() parent: TransactionMetaDatum
  ): Promise<PluralNameTest | null> {
    const result = await this.service.getPluralNameTest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
