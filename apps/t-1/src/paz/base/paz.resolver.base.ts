/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Paz } from "./Paz";
import { PazCountArgs } from "./PazCountArgs";
import { PazFindManyArgs } from "./PazFindManyArgs";
import { PazFindUniqueArgs } from "./PazFindUniqueArgs";
import { CreatePazArgs } from "./CreatePazArgs";
import { UpdatePazArgs } from "./UpdatePazArgs";
import { DeletePazArgs } from "./DeletePazArgs";
import { PazService } from "../paz.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Paz)
export class PazResolverBase {
  constructor(
    protected readonly service: PazService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Paz",
    action: "read",
    possession: "any",
  })
  async _pazsMeta(
    @graphql.Args() args: PazCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Paz])
  @nestAccessControl.UseRoles({
    resource: "Paz",
    action: "read",
    possession: "any",
  })
  async pazs(@graphql.Args() args: PazFindManyArgs): Promise<Paz[]> {
    return this.service.pazs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Paz, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Paz",
    action: "read",
    possession: "own",
  })
  async paz(@graphql.Args() args: PazFindUniqueArgs): Promise<Paz | null> {
    const result = await this.service.paz(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paz)
  @nestAccessControl.UseRoles({
    resource: "Paz",
    action: "create",
    possession: "any",
  })
  async createPaz(@graphql.Args() args: CreatePazArgs): Promise<Paz> {
    return await this.service.createPaz({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paz)
  @nestAccessControl.UseRoles({
    resource: "Paz",
    action: "update",
    possession: "any",
  })
  async updatePaz(@graphql.Args() args: UpdatePazArgs): Promise<Paz | null> {
    try {
      return await this.service.updatePaz({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Paz)
  @nestAccessControl.UseRoles({
    resource: "Paz",
    action: "delete",
    possession: "any",
  })
  async deletePaz(@graphql.Args() args: DeletePazArgs): Promise<Paz | null> {
    try {
      return await this.service.deletePaz(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
