/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dfdfdsf } from "@prisma/client";

export class DfdfdsfServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DfdfdsfCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.DfdfdsfCountArgs>
  ): Promise<number> {
    return this.prisma.dfdfdsf.count(args);
  }

  async dfdfdsfs<T extends Prisma.DfdfdsfFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DfdfdsfFindManyArgs>
  ): Promise<Dfdfdsf[]> {
    return this.prisma.dfdfdsf.findMany(args);
  }
  async dfdfdsf<T extends Prisma.DfdfdsfFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DfdfdsfFindUniqueArgs>
  ): Promise<Dfdfdsf | null> {
    return this.prisma.dfdfdsf.findUnique(args);
  }
  async createDfdfdsf<T extends Prisma.DfdfdsfCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DfdfdsfCreateArgs>
  ): Promise<Dfdfdsf> {
    return this.prisma.dfdfdsf.create<T>(args);
  }
  async updateDfdfdsf<T extends Prisma.DfdfdsfUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DfdfdsfUpdateArgs>
  ): Promise<Dfdfdsf> {
    return this.prisma.dfdfdsf.update<T>(args);
  }
  async deleteDfdfdsf<T extends Prisma.DfdfdsfDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DfdfdsfDeleteArgs>
  ): Promise<Dfdfdsf> {
    return this.prisma.dfdfdsf.delete(args);
  }
}
